import React, { useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';
import { Globe, Trophy, TrendingUp, Users, Calendar, Target } from 'lucide-react';
import { useAppSelector } from '../hooks';

const RegionalView = () => {
  const { salesMetrics, countries } = useAppSelector((state) => state.dashboard);
  const [activeMetric, setActiveMetric] = useState('njms');

  if (!salesMetrics) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 p-8">
        <div className="flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>
    );
  }

  // Generate country performance data
  const generateCountryData = () => {
    return countries.map((country, index) => {
      const baseMultiplier = 1 + (Math.random() * 0.4 - 0.2); // Â±20% variation
      const countryMultiplier = country.clubCount / 20; // Scale by club count
      
      const totalLeads = Math.floor(salesMetrics.totalLeads * countryMultiplier * baseMultiplier / 6);
      const appointments = Math.floor(salesMetrics.totalAppointments * countryMultiplier * baseMultiplier / 6);
      const appointmentShowed = Math.floor(appointments * 0.65);
      const njms = Math.floor(salesMetrics.totalNJMs * countryMultiplier * baseMultiplier / 6);
      
      return {
        id: country.id,
        name: country.name,
        flag: country.flag,
        clubCount: country.clubCount,
        totalLeads,
        appointments,
        appointmentShowed,
        njms,
        leadToSale: totalLeads > 0 ? ((njms / totalLeads) * 100) : 0,
        appointmentToSale: appointmentShowed > 0 ? ((njms / appointmentShowed) * 100) : 0,
        // Add colors for better visualization
        color: [
          '#3B82F6', // Blue
          '#10B981', // Green  
          '#F59E0B', // Yellow
          '#EF4444', // Red
          '#8B5CF6', // Purple
          '#06B6D4'  // Cyan
        ][index % 6]
      };
    });
  };

  const countryData = generateCountryData();

  const metrics = [
    {
      id: 'njms',
      name: 'NJMs',
      icon: Target,
      color: 'text-purple-600 dark:text-purple-400',
      bgColor: 'bg-purple-100 dark:bg-purple-900',
      dataKey: 'njms',
      unit: '',
      description: 'New Joining Members by country'
    },
    {
      id: 'totalLeads',
      name: 'Total Leads',
      icon: Users,
      color: 'text-blue-600 dark:text-blue-400',
      bgColor: 'bg-blue-100 dark:bg-blue-900',
      dataKey: 'totalLeads',
      unit: '',
      description: 'Total leads generated by country'
    },
    {
      id: 'appointmentShowed',
      name: 'Appointments Showed',
      icon: Calendar,
      color: 'text-green-600 dark:text-green-400',
      bgColor: 'bg-green-100 dark:bg-green-900',
      dataKey: 'appointmentShowed',
      unit: '',
      description: 'Appointments that were attended'
    },
    {
      id: 'leadToSale',
      name: 'Lead:Sale Ratio',
      icon: TrendingUp,
      color: 'text-orange-600 dark:text-orange-400',
      bgColor: 'bg-orange-100 dark:bg-orange-900',
      dataKey: 'leadToSale',
      unit: '%',
      description: 'NJMs divided by Total Leads'
    },
    {
      id: 'appointmentToSale',
      name: 'Appointment:Sale Ratio',
      icon: Trophy,
      color: 'text-red-600 dark:text-red-400',
      bgColor: 'bg-red-100 dark:bg-red-900',
      dataKey: 'appointmentToSale',
      unit: '%',
      description: 'NJMs divided by Showed Appointments'
    }
  ];

  const activeMetricData = metrics.find(m => m.id === activeMetric);
  const sortedData = [...countryData].sort((a, b) => b[activeMetricData.dataKey] - a[activeMetricData.dataKey]);

  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-white dark:bg-gray-800 p-4 border border-gray-200 dark:border-gray-600 rounded-xl shadow-lg backdrop-blur-sm">
          <p className="font-semibold text-gray-900 dark:text-white mb-2">
            {data.flag} {data.name}
          </p>
          <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">
            Clubs: {data.clubCount}
          </p>
          <p className="text-sm font-medium" style={{ color: payload[0].color }}>
            {activeMetricData.name}: {payload[0].value.toLocaleString()}{activeMetricData.unit}
          </p>
        </div>
      );
    }
    return null;
  };

  const getRankIcon = (index) => {
    if (index === 0) return 'ðŸ¥‡';
    if (index === 1) return 'ðŸ¥ˆ';
    if (index === 2) return 'ðŸ¥‰';
    return `#${index + 1}`;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 p-6 transition-colors duration-200">
        <div className="flex items-center gap-3 mb-6">
          <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
            <Globe className="w-6 h-6 text-blue-600 dark:text-blue-400" />
          </div>
          <div>
            <h2 className="text-xl font-bold text-gray-900 dark:text-white"> Regional View </h2>
            <p className="text-sm text-gray-600 dark:text-gray-400">Country performance leaderboards and comparisons</p>
          </div>
        </div>

        {/* Metric Toggle Buttons */}
        <div className="flex flex-wrap gap-2">
          {metrics.map((metric) => {
            const Icon = metric.icon;
            const isActive = activeMetric === metric.id;
            
            return (
              <button
                key={metric.id}
                onClick={() => setActiveMetric(metric.id)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                  isActive
                    ? `${metric.bgColor} ${metric.color} shadow-sm`
                    : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                <Icon className="w-4 h-4" />
                <span className="hidden sm:inline">{metric.name}</span>
                <span className="sm:hidden">{metric.name.split(' ')[0]}</span>
              </button>
            );
          })}
        </div>
      </div>

      {/* Main Content */}
      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
        {/* Chart Section */}
        <div className="xl:col-span-2 bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                {activeMetricData.name} by Country
              </h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {activeMetricData.description}
              </p>
            </div>
            <div className={`p-2 rounded-lg ${activeMetricData.bgColor}`}>
              <activeMetricData.icon className={`w-5 h-5 ${activeMetricData.color}`} />
            </div>
          </div>

          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={sortedData}
                margin={{ top: 20, right: 30, left: 20, bottom: 60 }}
                barCategoryGap="20%"
              >
                <defs>
                  <linearGradient id="countryGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={activeMetricData.color.includes('purple') ? '#8B5CF6' : 
                                                 activeMetricData.color.includes('blue') ? '#3B82F6' :
                                                 activeMetricData.color.includes('green') ? '#10B981' :
                                                 activeMetricData.color.includes('orange') ? '#F59E0B' : '#EF4444'} stopOpacity={0.8}/>
                    <stop offset="100%" stopColor={activeMetricData.color.includes('purple') ? '#6D28D9' : 
                                                   activeMetricData.color.includes('blue') ? '#1E40AF' :
                                                   activeMetricData.color.includes('green') ? '#047857' :
                                                   activeMetricData.color.includes('orange') ? '#D97706' : '#DC2626'} stopOpacity={1}/>
                  </linearGradient>
                </defs>
                
                <CartesianGrid 
                  strokeDasharray="3 3" 
                  stroke="#E5E7EB" 
                  strokeOpacity={0.5}
                  className="dark:stroke-gray-600"
                />
                <XAxis 
                  dataKey="flag"
                  tick={{ fontSize: 14 }}
                  axisLine={{ stroke: '#D1D5DB' }}
                  tickLine={{ stroke: '#D1D5DB' }}
                  className="dark:fill-gray-400"
                />
                <YAxis 
                  tick={{ fontSize: 12, fill: '#6B7280' }}
                  axisLine={{ stroke: '#D1D5DB' }}
                  tickLine={{ stroke: '#D1D5DB' }}
                  className="dark:fill-gray-400"
                />
                <Tooltip content={<CustomTooltip />} />
                
                <Bar 
                  dataKey={activeMetricData.dataKey}
                  fill="url(#countryGradient)"
                  radius={[6, 6, 0, 0]}
                  maxBarSize={80}
                >
                  {sortedData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Leaderboard Section */}
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 p-6">
          <div className="flex items-center gap-2 mb-6">
            <Trophy className="w-5 h-5 text-yellow-600 dark:text-yellow-400" />
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Leaderboard</h3>
          </div>

          <div className="space-y-3">
            {sortedData.map((country, index) => (
              <div
                key={country.id}
                className={`flex items-center justify-between p-3 rounded-lg transition-all duration-200 ${
                  index === 0 
                    ? 'bg-gradient-to-r from-yellow-50 to-yellow-100 dark:from-yellow-900 dark:to-yellow-800 border border-yellow-200 dark:border-yellow-700' 
                    : index === 1
                    ? 'bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600 border border-gray-200 dark:border-gray-600'
                    : index === 2
                    ? 'bg-gradient-to-r from-orange-50 to-orange-100 dark:from-orange-900 dark:to-orange-800 border border-orange-200 dark:border-orange-700'
                    : 'bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600'
                }`}
              >
                <div className="flex items-center gap-3 min-w-0 flex-1">
                  <div className="text-lg font-bold text-gray-700 dark:text-gray-300 w-8 text-center flex-shrink-0">
                    {getRankIcon(index)}
                  </div>
                  <div className="min-w-0 flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-lg">{country.flag}</span>
                      <span className="font-medium text-gray-900 dark:text-white truncate">
                        {country.name}
                      </span>
                    </div>
                    <div className="text-xs text-gray-600 dark:text-gray-400">
                      {country.clubCount} clubs
                    </div>
                  </div>
                </div>
                <div className="text-right flex-shrink-0">
                  <div className={`text-lg font-bold ${activeMetricData.color}`}>
                    {country[activeMetricData.dataKey].toLocaleString()}{activeMetricData.unit}
                  </div>
                  {activeMetricData.unit === '%' && (
                    <div className="text-xs text-gray-500 dark:text-gray-400">
                      conversion rate
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>

          {/* Summary Stats */}
          <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-gray-900 dark:text-white">
                  {countries.length}
                </div>
                <div className="text-xs text-gray-600 dark:text-gray-400">Countries</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-gray-900 dark:text-white">
                  {countries.reduce((sum, country) => sum + country.clubCount, 0)}
                </div>
                <div className="text-xs text-gray-600 dark:text-gray-400">Total Clubs</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RegionalView;